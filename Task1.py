def caching_fibonacci():
    # Ініціалізуємо порожній кеш у вигляді словника
    cache = {}

    def fibonacci(n: int) -> int:
        """
        Рекурсивно обчислює n-те число Фібоначчі з використанням кешування.
        
        Аргументи:
            n (int): індекс числа Фібоначчі для обчислення.
        
        Повертає:
            int: n-те число Фібоначчі.
        """
        # Обробка базових випадків
        if n <= 0:
            return 0
        if n == 1:
            return 1
        
        # Якщо значення вже обчислено і збережено в кеші, повертаємо його
        if n in cache:
            return cache[n]
        
        # Рекурсивне обчислення значення з кешуванням
        cache[n] = fibonacci(n - 1) + fibonacci(n - 2)
        return cache[n]

    return fibonacci

if __name__ == "__main__":
    fib = caching_fibonacci()
    
    # Обчислення 10-го числа Фібоначчі (очікуваний результат: 55)
    print(f"fib(10) = {fib(10)}")
    
    # Обчислення 15-го числа Фібоначчі (очікуваний результат: 610)
    print(f"fib(15) = {fib(15)}")